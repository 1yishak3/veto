Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/home/yitzhaq_m/react/flatApp2/node_modules/react-native-calendars/src/calendar-list/index.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _xdate = require('xdate');

var _xdate2 = babelHelpers.interopRequireDefault(_xdate);

var _interface = require('../interface');

var _style = require('./style');

var _style2 = babelHelpers.interopRequireDefault(_style);

var _dateutils = require('../dateutils');

var _dateutils2 = babelHelpers.interopRequireDefault(_dateutils);

var _calendar = require('../calendar');

var _calendar2 = babelHelpers.interopRequireDefault(_calendar);

var calendarHeight = 360;

var CalendarList = function (_Component) {
  babelHelpers.inherits(CalendarList, _Component);

  function CalendarList(props) {
    babelHelpers.classCallCheck(this, CalendarList);

    var _this = babelHelpers.possibleConstructorReturn(this, (CalendarList.__proto__ || Object.getPrototypeOf(CalendarList)).call(this, props));

    _this.pastScrollRange = props.pastScrollRange === undefined ? 50 : props.pastScrollRange;
    _this.futureScrollRange = props.futureScrollRange === undefined ? 50 : props.futureScrollRange;
    _this.style = (0, _style2.default)(props.theme);
    var ds = new _reactNative.ListView.DataSource({
      rowHasChanged: function rowHasChanged(r1, r2) {
        return r1.toString('yyyy MM') !== r2.toString('yyyy MM') || r2.propbump && r2.propbump !== r1.propbump;
      }
    });
    var rows = [];
    var texts = [];
    var date = (0, _interface.parseDate)(props.current) || (0, _xdate2.default)();
    for (var i = 0; i <= _this.pastScrollRange + _this.futureScrollRange; i++) {
      var text = date.clone().addMonths(i - _this.pastScrollRange).toString('MMM yyyy');
      rows.push(text);
      texts.push(text);
    }
    rows[_this.pastScrollRange] = date;
    rows[_this.pastScrollRange + 1] = date.clone().addMonths(1, true);
    if (_this.pastScrollRange) {
      rows[_this.pastScrollRange - 1] = date.clone().addMonths(-1, true);
    } else {
      rows[_this.pastScrollRange + 2] = date.clone().addMonths(2, true);
    }
    _this.state = {
      rows: rows,
      texts: texts,
      openDate: date,
      dataSource: ds.cloneWithRows(rows),
      initialized: false
    };
    _this.lastScrollPosition = -1000;
    return _this;
  }

  babelHelpers.createClass(CalendarList, [{
    key: 'renderCalendar',
    value: function renderCalendar(row) {
      if (row.getTime) {
        return _react2.default.createElement(_calendar2.default, {
          theme: this.props.theme,
          selected: this.props.selected,
          style: [{ height: calendarHeight }, this.style.calendar],
          current: row,
          hideArrows: true,
          hideExtraDays: this.props.hideExtraDays === undefined ? true : this.props.hideExtraDays,
          disableMonthChange: true,
          markedDates: this.props.markedDates,
          markingType: this.props.markingType,
          onDayPress: this.props.onDayPress,
          displayLoadingIndicator: this.props.displayLoadingIndicator,
          minDate: this.props.minDate,
          maxDate: this.props.maxDate,
          firstDay: this.props.firstDay,
          monthFormat: this.props.monthFormat,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        });
      } else {
        var text = row.toString();
        return _react2.default.createElement(
          _reactNative.View,
          { style: [{ height: calendarHeight }, this.style.placeholder], __source: {
              fileName: _jsxFileName,
              lineNumber: 89
            }
          },
          _react2.default.createElement(
            _reactNative.Text,
            { style: this.style.placeholderText, __source: {
                fileName: _jsxFileName,
                lineNumber: 90
              }
            },
            text
          )
        );
      }
    }
  }, {
    key: 'scrollToDay',
    value: function scrollToDay(d, offset, animated) {
      var day = (0, _interface.parseDate)(d);
      var diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));
      var scrollAmount = calendarHeight * this.pastScrollRange + diffMonths * calendarHeight + (offset || 0);
      var week = 0;
      var days = _dateutils2.default.page(day, this.props.firstDay);
      for (var i = 0; i < days.length; i++) {
        week = Math.floor(i / 7);
        if (_dateutils2.default.sameDate(days[i], day)) {
          scrollAmount += 46 * week;
          break;
        }
      }
      this.listView.scrollTo({ x: 0, y: scrollAmount, animated: animated });
    }
  }, {
    key: 'scrollToMonth',
    value: function scrollToMonth(m) {
      var month = (0, _interface.parseDate)(m);
      var scrollTo = month || this.state.openDate;
      var diffMonths = this.state.openDate.diffMonths(scrollTo);
      diffMonths = diffMonths < 0 ? Math.ceil(diffMonths) : Math.floor(diffMonths);
      var scrollAmount = calendarHeight * this.pastScrollRange + diffMonths * calendarHeight;

      this.listView.scrollTo({ x: 0, y: scrollAmount, animated: false });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.scrollToMonth(this.props.current);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var current = (0, _interface.parseDate)(this.props.current);
      var nextCurrent = (0, _interface.parseDate)(props.current);
      if (nextCurrent && current && nextCurrent.getTime() !== current.getTime()) {
        this.scrollToMonth(nextCurrent);
      }

      var rowclone = this.state.rows;
      var newrows = [];
      for (var i = 0; i < rowclone.length; i++) {
        var val = this.state.texts[i];
        if (rowclone[i].getTime) {
          val = rowclone[i].clone();
          val.propbump = rowclone[i].propbump ? rowclone[i].propbump + 1 : 1;
        }
        newrows.push(val);
      }
      this.setState({
        rows: newrows,
        dataSource: this.state.dataSource.cloneWithRows(newrows)
      });
    }
  }, {
    key: 'visibleRowsChange',
    value: function visibleRowsChange(visibleRows) {
      if (_reactNative.Platform.OS === 'android') {
        return;
      }
      if (!this.state.initialized) {
        this.setState({
          initialized: true
        });
        return;
      }
      var rowclone = this.state.rows;
      var newrows = [];
      var visibleMonths = [];
      for (var i = 0; i < rowclone.length; i++) {
        var val = rowclone[i];
        var rowShouldBeRendered = visibleRows.s1[i] || visibleRows.s1[i - 1] || visibleRows.s1[i + 1];
        if (rowShouldBeRendered && !rowclone[i].getTime) {
          val = this.state.openDate.clone().addMonths(i - this.pastScrollRange, true);
        } else if (!rowShouldBeRendered) {
          val = this.state.texts[i];
        }
        newrows.push(val);
        if (visibleRows.s1[i]) {
          visibleMonths.push((0, _interface.xdateToData)(val));
        }
      }
      if (this.props.onVisibleMonthsChange) {
        this.props.onVisibleMonthsChange(visibleMonths);
      }
      this.setState({
        rows: newrows,
        dataSource: this.state.dataSource.cloneWithRows(newrows)
      });
    }
  }, {
    key: 'onScroll',
    value: function onScroll(event) {
      if (_reactNative.Platform.OS !== 'android') {
        return;
      }
      if (!this.state.scrolled) {
        this.setState({
          scrolled: true
        });
      }
      var yOffset = event.nativeEvent.contentOffset.y;
      if (Math.abs(yOffset - this.lastScrollPosition) > calendarHeight) {
        this.lastScrollPosition = yOffset;
        var visibleMonths = [];
        var newrows = [];
        var _rows = this.state.rows;
        for (var i = 0; i < _rows.length; i++) {
          var val = _rows[i];
          var rowStart = i * calendarHeight;
          var rowShouldBeRendered = Math.abs(rowStart - yOffset) < calendarHeight * 2;
          if (rowShouldBeRendered && !val.getTime) {
            val = this.state.openDate.clone().addMonths(i - this.pastScrollRange, true);
          } else if (!rowShouldBeRendered) {
            val = this.state.texts[i];
          }
          if (val.getTime) {
            visibleMonths.push((0, _interface.xdateToData)(val));
          }
          newrows.push(val);
        }
        if (this.props.onVisibleMonthsChange) {
          this.props.onVisibleMonthsChange(visibleMonths);
        }
        this.setState({
          rows: newrows,
          dataSource: this.state.dataSource.cloneWithRows(newrows)
        });
      }
    }
  }, {
    key: 'onLayout',
    value: function onLayout() {
      if (_reactNative.Platform.OS !== 'android') {
        return;
      }
      if (!this.state.scrolled) {
        this.scrollToMonth(this.props.current);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(_reactNative.ListView, {
        ref: function ref(c) {
          return _this2.listView = c;
        },
        onScroll: this.onScroll.bind(this),

        style: [this.style.container, this.props.style],
        initialListSize: this.pastScrollRange * this.futureScrollRange + 1,
        dataSource: this.state.dataSource,
        scrollRenderAheadDistance: calendarHeight,

        pageSize: 1,
        removeClippedSubviews: true,
        onChangeVisibleRows: this.visibleRowsChange.bind(this),
        renderRow: this.renderCalendar.bind(this),
        showsVerticalScrollIndicator: false,
        onLayout: this.onLayout.bind(this),
        scrollEnabled: this.props.scrollingEnabled !== undefined ? this.props.scrollingEnabled : true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 245
        }
      });
    }
  }]);
  return CalendarList;
}(_react.Component);

CalendarList.propTypes = babelHelpers.extends({}, _calendar2.default.propTypes, {
  pastScrollRange: _propTypes2.default.number,

  futureScrollRange: _propTypes2.default.number,

  scrollEnabled: _propTypes2.default.bool
});
exports.default = CalendarList;