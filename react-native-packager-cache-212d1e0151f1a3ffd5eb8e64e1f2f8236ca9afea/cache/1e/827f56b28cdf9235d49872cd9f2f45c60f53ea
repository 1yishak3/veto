Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/home/yitzhaq_m/react/flatApp2/node_modules/react-native-carousel-view/src/carousel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactMixin = require('react-mixin');

var _reactMixin2 = babelHelpers.interopRequireDefault(_reactMixin);

var _reactTimerMixin = require('react-timer-mixin');

var _reactTimerMixin2 = babelHelpers.interopRequireDefault(_reactTimerMixin);

var _carouselPager = require('./carouselPager');

var _carouselPager2 = babelHelpers.interopRequireDefault(_carouselPager);

var _carousel = require('./styles/carousel');

var _carousel2 = babelHelpers.interopRequireDefault(_carousel);

var Carousel = function (_Component) {
  babelHelpers.inherits(Carousel, _Component);

  function Carousel(props) {
    babelHelpers.classCallCheck(this, Carousel);

    var _this = babelHelpers.possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

    if (!props.height) {
      throw new Error('You must set a height props.');
    }

    _this.state = {
      activePage: props.initialPage > 0 ? props.initialPage : 0
    };

    _this.getWidth = _this.getWidth.bind(_this);
    _this.indicatorPressed = _this.indicatorPressed.bind(_this);
    _this.renderPageIndicator = _this.renderPageIndicator.bind(_this);
    _this._setUpTimer = _this._setUpTimer.bind(_this);
    _this._animateNextPage = _this._animateNextPage.bind(_this);
    _this._onAnimationBegin = _this._onAnimationBegin.bind(_this);
    _this._onAnimationEnd = _this._onAnimationEnd.bind(_this);
    _this._filterChildren = _this._filterChildren.bind(_this);
    _this._resetPager = _this._resetPager.bind(_this);
    _this._filterChildren();
    return _this;
  }

  babelHelpers.createClass(Carousel, [{
    key: '_filterChildren',
    value: function _filterChildren() {
      var children = this.props.children;


      if (!children) {
        throw new Error('You have to set children inside Carousel component');
      }

      this.children = _react.Children.toArray(children).filter(function (child) {
        return child;
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this._filterChildren();

      this.clearTimeout(this.timer);
      this._resetPager();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._resetPager();
    }
  }, {
    key: 'indicatorPressed',
    value: function indicatorPressed(activePage) {
      this.setState({ activePage: activePage });
      this.pager.scrollToPage(activePage);
    }
  }, {
    key: '_resetPager',
    value: function _resetPager() {
      var initialPage = this.props.initialPage;

      if (initialPage > 0) {
        this.setState({ activePage: initialPage });
        this.pager.scrollToPage(initialPage, false);
      }

      if (this.children) {
        this._setUpTimer();
      }
    }
  }, {
    key: '_setUpTimer',
    value: function _setUpTimer() {
      var animate = this.props.animate;

      if (this.timer) {
        this.clearTimeout(this.timer);
      }

      if (animate && this.children.length > 1) {
        this.timer = this.setTimeout(this._animateNextPage, this.props.delay);
      }
    }
  }, {
    key: 'getWidth',
    value: function getWidth() {
      var width = this.props.width;

      if (width) {
        return width;
      }
      return _reactNative.Dimensions.get('window').width;
    }
  }, {
    key: '_animateNextPage',
    value: function _animateNextPage() {
      var activePage = this.state.activePage;

      if (activePage < this.children.length - 1) {
        activePage++;
      } else if (this.props.loop) {
        activePage = 0;
      } else if (!this.props.loop) {
        this.clearTimeout(this.timer);
        return;
      }

      this.indicatorPressed(activePage);
      this._setUpTimer();
    }
  }, {
    key: '_onAnimationBegin',
    value: function _onAnimationBegin() {
      var onScrollBegin = this.props.onScrollBegin;

      if (onScrollBegin) {
        onScrollBegin();
      }
      this.clearTimeout(this.timer);
    }
  }, {
    key: '_onAnimationEnd',
    value: function _onAnimationEnd(activePage) {
      var onPageChange = this.props.onPageChange;

      if (onPageChange) {
        onPageChange(activePage);
      }
      this.setState({ activePage: activePage }, this._setUpTimer());
    }
  }, {
    key: 'renderPageIndicator',
    value: function renderPageIndicator() {
      var _this2 = this;

      var _props = this.props,
          hideIndicators = _props.hideIndicators,
          indicatorOffset = _props.indicatorOffset,
          indicatorAtBottom = _props.indicatorAtBottom,
          indicatorSpace = _props.indicatorSpace,
          indicatorColor = _props.indicatorColor,
          inactiveIndicatorColor = _props.inactiveIndicatorColor,
          indicatorSize = _props.indicatorSize,
          indicatorText = _props.indicatorText,
          inactiveIndicatorText = _props.inactiveIndicatorText;
      var activePage = this.state.activePage;

      if (hideIndicators === true) {
        return null;
      }

      var indicators = [];
      var positionIndicatorStyle = indicatorAtBottom ? { bottom: indicatorOffset } : { top: indicatorOffset };
      var indicatorWidth = this.children.length * indicatorSpace;
      var style = void 0;
      var position = void 0;

      position = {
        minWidth: indicatorWidth,
        left: (this.getWidth() - indicatorWidth) / 2
      };

      this.children.forEach(function (child, i) {
        style = i === activePage ? { color: indicatorColor } : { color: inactiveIndicatorColor };
        indicators.push(_react2.default.createElement(
          _reactNative.Text,
          {
            style: [style, { fontSize: indicatorSize }],
            key: i,
            onPress: function onPress() {
              return _this2.indicatorPressed(i);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 211
            }
          },
          i === activePage ? indicatorText : inactiveIndicatorText
        ));
      });

      if (indicators.length === 1) {
        return null;
      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: [_carousel2.default.pageIndicator, position, positionIndicatorStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 227
          }
        },
        indicators
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          height = _props2.height,
          contentContainerStyle = _props2.contentContainerStyle,
          onScroll = _props2.onScroll;

      var width = this.getWidth();
      return _react2.default.createElement(
        _reactNative.View,
        { style: { width: width }, __source: {
            fileName: _jsxFileName,
            lineNumber: 237
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          { style: { width: width, height: height, overflow: 'hidden' }, __source: {
              fileName: _jsxFileName,
              lineNumber: 238
            }
          },
          _react2.default.createElement(
            _carouselPager2.default,
            {
              ref: function ref(pager) {
                _this3.pager = pager;
              },
              width: width,
              height: height,
              contentContainerStyle: [_carousel2.default.contentContainer, contentContainerStyle],
              onScroll: onScroll,
              onBegin: this._onAnimationBegin,
              onEnd: this._onAnimationEnd,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 239
              }
            },
            this.children
          )
        ),
        this.renderPageIndicator()
      );
    }
  }]);
  return Carousel;
}(_react.Component);

Carousel.defaultProps = {
  hideIndicators: false,
  indicatorColor: '#000000',
  indicatorSize: 20,
  inactiveIndicatorColor: '#999999',
  indicatorAtBottom: true,
  indicatorOffset: 0,
  indicatorText: '●',
  inactiveIndicatorText: '●',
  width: null,
  height: 200,
  initialPage: 0,
  indicatorSpace: 20,
  animate: true,
  delay: 1000,
  loop: true,
  onScroll: function onScroll() {}
};
exports.default = Carousel;
;

(0, _reactMixin2.default)(Carousel.prototype, _reactTimerMixin2.default);