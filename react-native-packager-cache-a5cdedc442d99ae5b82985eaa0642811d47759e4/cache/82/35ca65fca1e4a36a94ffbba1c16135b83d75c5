Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/home/yitzhaq_m/devfest/veto/node_modules/react-native-calendars/src/agenda/reservation-list/index.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _xdate = require('xdate');

var _xdate2 = babelHelpers.interopRequireDefault(_xdate);

var _dateutils = require('../../dateutils');

var _dateutils2 = babelHelpers.interopRequireDefault(_dateutils);

var _interface = require('../../interface');

var _style = require('./style');

var _style2 = babelHelpers.interopRequireDefault(_style);

var ReactComp = function (_Component) {
  babelHelpers.inherits(ReactComp, _Component);

  function ReactComp(props) {
    babelHelpers.classCallCheck(this, ReactComp);

    var _this = babelHelpers.possibleConstructorReturn(this, (ReactComp.__proto__ || Object.getPrototypeOf(ReactComp)).call(this, props));

    _this.styles = (0, _style2.default)(props.theme);
    var ds = new _reactNative.ListView.DataSource({
      rowHasChanged: function rowHasChanged(r1, r2) {
        var changed = true;
        if (!r1 && !r2) {
          changed = false;
        } else if (r1 && r2) {
          if (r1.day.getTime() !== r2.day.getTime()) {
            changed = true;
          } else if (!r1.reservation && !r2.reservation) {
            changed = false;
          } else if (r1.reservation && r2.reservation) {
            if (!r1.date && !r2.date || r1.date && r2.date) {
              changed = _this.props.rowHasChanged(r1.reservation, r2.reservation);
            }
          }
        }
        return changed;
      }
    });
    _this.state = {
      reservationsSource: ds.cloneWithRows([]),
      reservations: []
    };
    _this.heights = [];
    _this.selectedDay = _this.props.selectedDay;
    _this.scrollOver = true;
    return _this;
  }

  babelHelpers.createClass(ReactComp, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.updateDataSource(this.getReservations(this.props).reservations);
    }
  }, {
    key: 'updateDataSource',
    value: function updateDataSource(reservations) {
      this.setState({
        reservations: reservations,
        reservationsSource: this.state.reservationsSource.cloneWithRows(reservations)
      });
    }
  }, {
    key: 'updateReservations',
    value: function updateReservations(props) {
      var reservations = this.getReservations(props);
      if (this.list && !_dateutils2.default.sameDate(props.selectedDay, this.selectedDay)) {
        var scrollPosition = 0;
        for (var i = 0; i < reservations.scrollPosition; i++) {
          scrollPosition += this.heights[i] || 0;
        }
        this.scrollOver = false;
        this.list.scrollTo({ x: 0, y: scrollPosition, animated: true });
      }
      this.selectedDay = props.selectedDay;
      this.updateDataSource(reservations.reservations);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var _this2 = this;

      if (!_dateutils2.default.sameDate(props.topDay, this.props.topDay)) {
        this.setState({
          reservations: []
        }, function () {
          _this2.updateReservations(props);
        });
      } else {
        this.updateReservations(props);
      }
    }
  }, {
    key: 'onScroll',
    value: function onScroll(event) {
      var yOffset = event.nativeEvent.contentOffset.y;
      this.props.onScroll(yOffset);
      var topRowOffset = 0;
      var topRow = void 0;
      for (topRow = 0; topRow < this.heights.length; topRow++) {
        if (topRowOffset + this.heights[topRow] / 2 >= yOffset) {
          break;
        }
        topRowOffset += this.heights[topRow];
      }
      var row = this.state.reservations[topRow];
      if (!row) return;
      var day = row.day;
      var sameDate = _dateutils2.default.sameDate(day, this.selectedDay);
      if (!sameDate && this.scrollOver) {
        this.selectedDay = day.clone();
        this.props.onDayChange(day.clone());
      }
    }
  }, {
    key: 'onRowLayoutChange',
    value: function onRowLayoutChange(ind, event) {
      this.heights[ind] = event.nativeEvent.layout.height;
    }
  }, {
    key: 'renderRow',
    value: function renderRow(row, section, ind) {
      var reservation = row.reservation,
          date = row.date;

      var content = void 0;
      if (reservation) {
        var firstItem = date ? true : false;
        content = this.props.renderItem(reservation, firstItem);
      } else {
        content = this.props.renderEmptyDate(date);
      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: this.styles.container, onLayout: this.onRowLayoutChange.bind(this, ind), __source: {
            fileName: _jsxFileName,
            lineNumber: 142
          }
        },
        this.renderDate(date, reservation),
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 1 }, __source: {
              fileName: _jsxFileName,
              lineNumber: 144
            }
          },
          content
        )
      );
    }
  }, {
    key: 'renderDate',
    value: function renderDate(date, item) {
      if (this.props.renderDay) {
        return this.props.renderDay(date ? (0, _interface.xdateToData)(date) : undefined, item);
      }
      var today = _dateutils2.default.sameDate(date, (0, _xdate2.default)()) ? this.styles.today : undefined;
      if (date) {
        return _react2.default.createElement(
          _reactNative.View,
          { style: this.styles.day, __source: {
              fileName: _jsxFileName,
              lineNumber: 158
            }
          },
          _react2.default.createElement(
            _reactNative.Text,
            { style: [this.styles.dayNum, today], __source: {
                fileName: _jsxFileName,
                lineNumber: 159
              }
            },
            date.getDate()
          ),
          _react2.default.createElement(
            _reactNative.Text,
            { style: [this.styles.dayText, today], __source: {
                fileName: _jsxFileName,
                lineNumber: 160
              }
            },
            _xdate2.default.locales[_xdate2.default.defaultLocale].dayNamesShort[date.getDay()]
          )
        );
      } else {
        return _react2.default.createElement(_reactNative.View, { style: this.styles.day, __source: {
            fileName: _jsxFileName,
            lineNumber: 165
          }
        });
      }
    }
  }, {
    key: 'getReservationsForDay',
    value: function getReservationsForDay(iterator, props) {
      var day = iterator.clone();
      var res = props.reservations[day.toString('yyyy-MM-dd')];
      if (res && res.length) {
        return res.map(function (reservation, i) {
          return {
            reservation: reservation,
            date: i ? false : day,
            day: day
          };
        });
      } else if (res) {
        return [{
          date: iterator.clone(),
          day: day
        }];
      } else {
        return false;
      }
    }
  }, {
    key: 'onListTouch',
    value: function onListTouch() {
      this.scrollOver = true;
    }
  }, {
    key: 'getReservations',
    value: function getReservations(props) {
      if (!props.reservations || !props.selectedDay) {
        return { reservations: [], scrollPosition: 0 };
      }
      var reservations = [];
      if (this.state.reservations && this.state.reservations.length) {
        var _iterator = this.state.reservations[0].day.clone();
        while (_iterator.getTime() < props.selectedDay.getTime()) {
          var res = this.getReservationsForDay(_iterator, props);
          if (!res) {
            reservations = [];
            break;
          } else {
            reservations = reservations.concat(res);
          }
          _iterator.addDays(1);
        }
      }
      var scrollPosition = reservations.length;
      var iterator = props.selectedDay.clone();
      for (var i = 0; i < 31; i++) {
        var _res = this.getReservationsForDay(iterator, props);
        if (_res) {
          reservations = reservations.concat(_res);
        }
        iterator.addDays(1);
      }

      return { reservations: reservations, scrollPosition: scrollPosition };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (!this.props.reservations || !this.props.reservations[this.props.selectedDay.toString('yyyy-MM-dd')]) {
        return _react2.default.createElement(_reactNative.ActivityIndicator, { style: { marginTop: 80 }, __source: {
            fileName: _jsxFileName,
            lineNumber: 228
          }
        });
      }
      return _react2.default.createElement(_reactNative.ListView, {
        ref: function ref(c) {
          return _this3.list = c;
        },
        style: this.props.style,
        renderRow: this.renderRow.bind(this),
        dataSource: this.state.reservationsSource,
        onScroll: this.onScroll.bind(this),
        showsVerticalScrollIndicator: false,
        scrollEventThrottle: 200,
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture() {
          _this3.onListTouch();return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 231
        }
      });
    }
  }]);
  return ReactComp;
}(_react.Component);

ReactComp.propTypes = {
  rowHasChanged: _propTypes2.default.func,

  renderItem: _propTypes2.default.func,

  renderDay: _propTypes2.default.func,

  renderEmptyDate: _propTypes2.default.func,

  onDayChange: _propTypes2.default.func,

  onScroll: _propTypes2.default.func,

  reservations: _propTypes2.default.object,

  selectedDay: _propTypes2.default.instanceOf(_xdate2.default),
  topDay: _propTypes2.default.instanceOf(_xdate2.default)
};
exports.default = ReactComp;